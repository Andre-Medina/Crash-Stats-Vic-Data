cbind( case, 1 - case) ~ . -pooled.stratum -stratum -education,
family = binomial,
data = infert)
#modeln <- glm(
#  cbind( case, 1 - case) ~ 1,
#  family = binomial,
#  data = infert)
#compare deviance and df
dev <- modeln$deviance - model1$deviance
n <- modeln$df.residual - model1$df.residual
#chisq test
pchisq(dev, n, lower.tail = FALSE)
anova(model1, modeln)
#questions 3
data("discoveries")
?discoveries
start = 1860
finish = 1959
#transforming the data
dis <- discoveries[1:(finish - start + 1)]
yer <- seq(start, finish)
data <- matrix(c(yer,dis), nrow = (finish - start + 1), ncol = 2)
#with just year
model1 <- glm(
dis ~ yer,
family = poisson(link = "log")
)
summary(model1)
#modle with year and year^2
model2 <- glm(
dis ~ yer + I(yer^2),
family = poisson(link = "log"),
trace = 0
)
summary(model2)
#CODE FROM SOLUTIONS TO GRAPH
x <- disc.df$year
plot(x, disc.df$disc)
beta1 <- model1$coefficients
lines(x, exp(beta1[1] + beta1[2]*x), col="blue", lty=2)
beta2 <- model2$coefficients
lines(x, exp(beta2[1] + beta2[2]*x + beta2[3]*x^2), col="red")
#END OF GRAPHING CODE
#null model
modeln <- glm(
dis ~ 1,
family = poisson(link = "log"),
trace = 0
)
#compare deviance and df
anova(modeln, model1, model2)
#chisq tests
#year to year^2
(dev <- model1$deviance - model2$deviance )
n <- model1$df.residual - model2$df.residual
pchisq(dev, n, lower.tail = FALSE)
#year to null
(dev <- modeln$deviance - model1$deviance)
n <- modeln$df.residual - model1$df.residual
pchisq(dev, n, lower.tail = FALSE)
#year^2 to null
(dev <- modeln$deviance - model2$deviance)
n <- modeln$df.residual - model2$df.residual
pchisq(dev, n, lower.tail = FALSE)
#compare deviance and df
anova(modeln, model1, model2)
#compare deviance and df
anova(modeln, model1, model2, test='F')
#compare deviance and df
anova(modeln, model1, model2, test='t')
#compare deviance and df
anova(modeln, model1, model2, test='Chisq')
anova(model1, test="Chisq")
library(faraway)
data(cornnit)
?cornnit
cornnit
x = log(cornnit$nitrogen + 1)
y = (cornnit$yield)
plot(x, y)
y
summary(glmfit)
# 1a
#check week 4 lab doc for def of pearson res
pearson.res = residuals(glmfit, type="pearson")
#calcing dispersion parameter:
(disp = sum(pearson.res^2)/glmfit$df.residual)
anova(glmfit)
anova(glmfit,test='F')
anova(glmfit,test='Chisq')
y = log(cornnit$yield+5)
x = log(cornnit$nitrogen + 5)
y = cornnit$yield
plot(x,y)
plot(exp(x)-5,y)
?family
plot(x,y)
wavesolder
wavesolder["temp"]
log(wavesolder["temp"])
log(wavesolder["temp"] + 1)
apply(wavesolder["temp"], function(x) log(x)
)
apply(wavesolder["temp"], log(x))
sapply(wavesolder["temp"], log(x))
sapply(wavesolder["temp"], log
)
sapply(wavesolder["temp"], 1, log(x))
sapply(wavesolder["temp"], 1, log())
sapply(wavesolder["temp"], 1, log
)
sapply(wavesolder["temp"], 1, log)
lapply(wavesolder["temp"], log)
lapply(wavesolder["temp"], log(x))
lapply(as.list(wavesolder["temp"]), log)
lapply((wavesolder["temp"]), log)
lapply((wavesolder["temp"]))
log(2)
lapply((wavesolder["temp"]), log(x))
lapply((wavesolder["temp"]), max
)
lapply((wavesolder["temp"]), max)
wavesolder["temp"]
log(wavesolder["temp"])
wavesolder["temp"].log
apply(log,wavesolder["temp"])
library(faraway)
data(dicentric)
with(dicentric, interaction.plot(doseamt, doserate, ca/cells))
?dicentric
dicentric
# can model counts or rates
model = glm(
ca ~ offset(log(cells)) + doserate + doseamt,
family = poisson(link = "log"),
data = dicentric
)
par(mfrow=c(2,2))
plot(model)
dicentric
dicentric[14,]
model2 = glm(
ca ~ offset(log(cells)) + doserate + doseamt,
family = poisson(link = "log"),
data = dicentric[c(-19, -9, -27),]
)
par(mfrow=c(2,2))
plot(model2)
model2
summary(model2)
model2 = glm(
ca ~ offset(log(cells)) + doseamt,
family = poisson(link = "log"),
data = dicentric[c(-19, -9, -27),]
)
model3 = glm(
ca ~ offset(log(cells)) + doserate + doseamt,
family = poisson(link = "log"),
data = dicentric[c(-19, -9, -27),]
)
anova(model2, model3)
anova(model2, model3, test="F")
anova(model2, model3, test="chisq")
anova(model2, model3, test="Chisq")
?predict
library(faraway)
library(betareg)
library(StepBeta)
colours = c('green3','blueviolet','red', 'blue','magenta','orange3','purple','lavender','salmon','mediumturquoise')
setwd("D:/projects/Crash-Stats-Vic-data")
# reading the files
data_train <- read.csv(file ="data/clean/train_region.csv", header=TRUE)
data_test <- read.csv(file ="data/clean/train_region.csv", header=TRUE)
data_train
data_train$Part.of.Day <- factor(data_train$Part.of.Day )
data_train$Day.of.the.Week <- factor(data_train$Day.of.the.Week)
data_train$Region <- factor(data_train$Region)
data_train$Sky <- factor(data_train$Sky)
data_train
# plotting ambulance vs police
par(mfrow=c(1,2))
plot(Police ~ Ambulance, data_train, col = sample(colours, 1))
model <- lm(Police ~ 0 + Ambulance, data_train) # add a line of best fit to the plot
abline(model)
summary(model)
confint(model, level = 0.95)
plot(log(Police) ~ log(Ambulance), data_train, col = sample(colours, 1))
# plotting bar graphs
par(mfrow=c(2, 2))
plot(Ambulance ~ Part.of.Day, data_train, col = sample(colours))
plot(Ambulance ~ Day.of.the.Week, data_train, col = sample(colours))
plot(Ambulance ~ Region, data_train, col = sample(colours))
plot(Ambulance ~ Sky, data_train, col = sample(colours))
# plotting interaction
par(mfrow=c(2,3))
with(data_train, interaction.plot(Day.of.the.Week, Part.of.Day, Ambulance, col = colours))
with(data_train, interaction.plot(Day.of.the.Week, Sky, Ambulance, col = colours))
with(data_train, interaction.plot(Sky, Part.of.Day, Ambulance, col = colours))
with(data_train, interaction.plot(Region, Day.of.the.Week, Ambulance, col = colours))
with(data_train, interaction.plot(Region, Part.of.Day, Ambulance, col = colours))
with(data_train, interaction.plot(Region, Sky, Ambulance, col = colours))
epsilon =  0.0000001
# increasing ambulance by a tiny bit because beta dist
data_train$Ambulance = data_train$Ambulance + epsilon
data_train$Police = data_train$Police + epsilon
# inital plot
betam = betareg(
Ambulance ~ (Region + Day.of.the.Week + Part.of.Day + Sky)^2,
data = data_train
)
# doesnt change anything
betam <- StepBeta(betam)
library(faraway)
colours = c('green3','blueviolet','red', 'blue','magenta','orange3','purple','lavender','salmon','mediumturquoise')
setwd("D:/projects/Crash-Stats-Vic-data")
#backwards selection formula
back_selection <- function(base_formula, family, data, test = "F", sig_level = 0.05){
to_remove = c()
repeat{
if(length(to_remove)){
formula = paste0(
base_formula ,
" -", paste(to_remove, collapse = " -"))
}else{
formula = base_formula
}
model = glm(
#poism$formula,
as.formula(formula),
family = family,
data = data
)
drop_scores = drop1(model, test=test)
if(test == "F"){
highest_pr = max(drop_scores$`Pr(>F)`[-1])
removing = rownames(drop_scores)[which.max(drop_scores$`Pr(>F)`)]
to_remove = c(to_remove, removing)
}else if(test == "Chi"){
highest_pr = max(drop_scores$`Pr(>Chi)`[-1])
removing = rownames(drop_scores)[which.max(drop_scores$`Pr(>Chi)`)]
to_remove = c(to_remove, removing)
}#else if(test == "t"){
#  highest_pr = max(drop_scores$`Pr(>|t|)`[-1])
#  removing = rownames(drop_scores)[which.max(drop_scores$`Pr(>Chi)`)]
#  to_remove = c(to_remove, removing)
#}
print(cat('removing: ',removing))
if(highest_pr < sig_level){
print(cat('breaking, highest pr is: ', highest_pr))
break
}
}
return(model)
}
data_train <- read.csv(file ="data/clean/train_region.csv", header=TRUE)
data_test <- read.csv(file ="data/clean/train_region.csv", header=TRUE)
data_train
data_train$Part.of.Day <- factor(data_train$Part.of.Day )
data_train$Day.of.the.Week <- factor(data_train$Day.of.the.Week)
data_train$Region <- factor(data_train$Region)
data_train$Sky <- factor(data_train$Sky)
data_train
data_train$Police = data_train$Police
par(mfrow=c(1,2))
plot(Police ~ Ambulance, data_train, col = sample(colours, 1))
# add a line of best fit to the plot
model <- lm(Police ~ 0 + Ambulance, data_train)
abline(model)
summary(model)
confint(model, level = 0.95)
plot(log(Police) ~ log(Ambulance), data_train, col = sample(colours, 1))
par(mfrow=c(2, 2))
plot(Police ~ Part.of.Day, data_train, col = sample(colours))
plot(Police ~ Day.of.the.Week, data_train, col = sample(colours))
plot(Police ~ Region, data_train, col = sample(colours))
plot(Police ~ Sky, data_train, col = sample(colours))
par(mfrow=c(1,3))
with(data_train, interaction.plot(Day.of.the.Week, Part.of.Day, Police, col = colours))
with(data_train, interaction.plot(Day.of.the.Week, Sky, Police, col = colours))
with(data_train, interaction.plot(Sky, Part.of.Day, Police, col = colours))
#leaves only the poisson distribution
#inital plot
poism = glm(
Police ~ Region + (Day.of.the.Week + Part.of.Day + Sky)^2,
family = poisson(link = "log"),
data = data_train
)
#comparing the dispersion
summary(poism)
summary(poism)$dispersion
(phi <- sum(residuals(poism, type="pearson")^2) / poism$df.residual)
par(mfrow=c(2,2))
plot(poism)
summary(poism)
#using backwards selection to remove insig ones
poism = back_selection(
"Police ~ Region + (Day.of.the.Week + Part.of.Day + Sky)^2",
family = quasipoisson(link = "log"),
data = data_train,
sig_level = 0.05
)
summary(poism)
#comparing the dispersion
summary(poism)$dispersion
(phi <- sum(residuals(poism, type="pearson")^2) / poism$df.residual)
par(mfrow=c(2,2))
plot(predict(poism), residuals(poism), col = c('green3'))
halfnorm(residuals(poism), ylab="residuals", col = colours)
halfnorm(rstudent(poism), ylab="jackknife resid", col = c('salmon'))
halfnorm(cooks.distance(poism), ylab="cooks dist", col = c('orange3'))
# predicting test values
# predict police incidents for data_test
Prediction = predict(poism, newdata = data_test, type = "response")
par(mfrow=c(1,2))
plot(Prediction ~ Police, data_test, col = sample(colours, 1))
sqrt(mean((Prediction - data_test$Police)^2))
#leaves only the poisson distribution
#inital plot
poism = glm(
Police + 1 ~ (Region + Day.of.the.Week + Part.of.Day + Sky)^2,
family = poisson(link = "log"),
data = data_train
)
#comparing the dispersion
summary(poism)
summary(poism)$dispersion
(phi <- sum(residuals(poism, type="pearson")^2) / poism$df.residual)
par(mfrow=c(2,2))
plot(poism)
summary(poism)
#using backwards selection to remove insig ones
poism = back_selection(
"Police ~ Region + (Day.of.the.Week + Part.of.Day + Sky)^2",
family = quasipoisson(link = "log"),
data = data_train,
sig_level = 0.05
)
summary(poism)
#comparing the dispersion
summary(poism)$dispersion
(phi <- sum(residuals(poism, type="pearson")^2) / poism$df.residual)
par(mfrow=c(2,2))
plot(predict(poism), residuals(poism), col = c('green3'))
halfnorm(residuals(poism), ylab="residuals", col = colours)
halfnorm(rstudent(poism), ylab="jackknife resid", col = c('salmon'))
halfnorm(cooks.distance(poism), ylab="cooks dist", col = c('orange3'))
# predicting test values
# predict police incidents for data_test
Prediction = predict(poism, newdata = data_test, type = "response")
par(mfrow=c(1,2))
plot(Prediction ~ Police, data_test, col = sample(colours, 1))
sqrt(mean((Prediction - data_test$Police)^2))
#using backwards selection to remove insig ones
poism = back_selection(
"Police + 1 ~ Region + (Day.of.the.Week + Part.of.Day + Sky)^2",
family = quasipoisson(link = "log"),
data = data_train,
sig_level = 0.05
)
summary(poism)
#comparing the dispersion
summary(poism)$dispersion
(phi <- sum(residuals(poism, type="pearson")^2) / poism$df.residual)
par(mfrow=c(2,2))
plot(predict(poism), residuals(poism), col = c('green3'))
halfnorm(residuals(poism), ylab="residuals", col = colours)
halfnorm(rstudent(poism), ylab="jackknife resid", col = c('salmon'))
halfnorm(cooks.distance(poism), ylab="cooks dist", col = c('orange3'))
# predicting test values
# predict police incidents for data_test
Prediction = predict(poism, newdata = data_test, type = "response")
par(mfrow=c(1,2))
plot(Prediction ~ Police, data_test, col = sample(colours, 1))
sqrt(mean((Prediction - data_test$Police)^2))
# predicting test values
# predict police incidents for data_test
Prediction = predict(poism, newdata = data_test, type = "response") - 1
par(mfrow=c(1,2))
plot(Prediction ~ Police, data_test, col = sample(colours, 1))
sqrt(mean((Prediction - data_test$Police)^2))
# predicting test values
# predict police incidents for data_test
Prediction = predict(poism, newdata = data_test, type = "response")
par(mfrow=c(1,2))
plot(Prediction ~ Police, data_test, col = sample(colours, 1))
sqrt(mean((Prediction - data_test$Police)^2))
# predicting test values
# predict police incidents for data_test
Prediction = predict(poism, newdata = data_test, type = "response") - 1
par(mfrow=c(1,2))
plot(Prediction ~ Police, data_test, col = sample(colours, 1))
sqrt(mean((Prediction - data_test$Police)^2))
#using backwards selection to remove insig ones
poism = back_selection(
"Police ~ Region + (Day.of.the.Week + Part.of.Day + Sky)^2",
family = quasipoisson(link = "log"),
data = data_train,
sig_level = 0.05
)
summary(poism)
#comparing the dispersion
summary(poism)$dispersion
#using backwards selection to remove insig ones
poism = back_selection(
"Police + 1 ~ (Region + Day.of.the.Week + Part.of.Day + Sky)^2",
family = quasipoisson(link = "log"),
data = data_train,
sig_level = 0.05
)
summary(poism)
#comparing the dispersion
summary(poism)$dispersion
(phi <- sum(residuals(poism, type="pearson")^2) / poism$df.residual)
par(mfrow=c(2,2))
plot(predict(poism), residuals(poism), col = c('green3'))
halfnorm(residuals(poism), ylab="residuals", col = colours)
halfnorm(rstudent(poism), ylab="jackknife resid", col = c('salmon'))
halfnorm(cooks.distance(poism), ylab="cooks dist", col = c('orange3'))
# predicting test values
# predict police incidents for data_test
Prediction = predict(poism, newdata = data_test, type = "response") - 1
par(mfrow=c(1,2))
plot(Prediction ~ Police, data_test, col = sample(colours, 1))
sqrt(mean((Prediction - data_test$Police)^2))
par(mfrow=c(2,2))
plot(predict(poism), residuals(poism), col = c('green3'))
halfnorm(residuals(poism), ylab="residuals", col = colours)
halfnorm(rstudent(poism), ylab="jackknife resid", col = c('salmon'))
halfnorm(cooks.distance(poism), ylab="cooks dist", col = c('orange3'))
data_train
data_train[6,]
data_train[-6,]
#using backwards selection to remove insig ones
poism = back_selection(
"Police + 1 ~ (Region + Day.of.the.Week + Part.of.Day + Sky)^2",
family = quasipoisson(link = "log"),
data = data_train[-6,],
sig_level = 0.05
)
summary(poism)
#comparing the dispersion
summary(poism)$dispersion
(phi <- sum(residuals(poism, type="pearson")^2) / poism$df.residual)
par(mfrow=c(2,2))
plot(predict(poism), residuals(poism), col = c('green3'))
halfnorm(residuals(poism), ylab="residuals", col = colours)
halfnorm(rstudent(poism), ylab="jackknife resid", col = c('salmon'))
halfnorm(cooks.distance(poism), ylab="cooks dist", col = c('orange3'))
#using backwards selection to remove insig ones
poism = back_selection(
"Police + 1 ~ (Region + Day.of.the.Week + Part.of.Day + Sky)^2",
family = quasipoisson(link = "log"),
data = data_train[c(-6,-4),],
sig_level = 0.05
)
summary(poism)
#comparing the dispersion
summary(poism)$dispersion
(phi <- sum(residuals(poism, type="pearson")^2) / poism$df.residual)
par(mfrow=c(2,2))
plot(predict(poism), residuals(poism), col = c('green3'))
halfnorm(residuals(poism), ylab="residuals", col = colours)
halfnorm(rstudent(poism), ylab="jackknife resid", col = c('salmon'))
halfnorm(cooks.distance(poism), ylab="cooks dist", col = c('orange3'))
# predicting test values
# predict police incidents for data_test
Prediction = predict(poism, newdata = data_test, type = "response") - 1
par(mfrow=c(1,2))
plot(Prediction ~ Police, data_test, col = sample(colours, 1))
data_train[c(6,4),]
#using backwards selection to remove insig ones
poism = back_selection(
"Police + 1 ~ (Region + Day.of.the.Week + Part.of.Day + Sky)^2",
family = quasipoisson(link = "log"),
data = data_train,
sig_level = 0.05
)
summary(poism)
#comparing the dispersion
summary(poism)$dispersion
(phi <- sum(residuals(poism, type="pearson")^2) / poism$df.residual)
par(mfrow=c(2,2))
plot(predict(poism), residuals(poism), col = c('green3'))
halfnorm(residuals(poism), ylab="residuals", col = colours)
halfnorm(rstudent(poism), ylab="jackknife resid", col = c('salmon'))
halfnorm(cooks.distance(poism), ylab="cooks dist", col = c('orange3'))
# predicting test values
# predict police incidents for data_test
Prediction = predict(poism, newdata = data_test, type = "response") - 1
par(mfrow=c(1,2))
plot(Prediction ~ Police, data_test, col = sample(colours, 1))
sqrt(mean((Prediction - data_test$Police)^2))
#using backwards selection to remove insig ones
poism = back_selection(
"Police + 1 ~ (Region + Day.of.the.Week + Part.of.Day + Sky)^2",
family = quasipoisson(link = "log"),
data = data_train,
sig_level = 0.05
)
#leaves only the poisson distribution
#inital plot
poism = glm(
Police + 1 ~ (Region + Day.of.the.Week + Part.of.Day + Sky)^2,
family = poisson(link = "log"),
data = data_train
)
#comparing the dispersion
summary(poism)
summary(poism)$dispersion
(phi <- sum(residuals(poism, type="pearson")^2) / poism$df.residual)
par(mfrow=c(2,2))
plot(poism)
